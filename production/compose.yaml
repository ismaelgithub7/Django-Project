version: '3'

services:
  postgres:
    container_name: postgres-alpine-production
    image: postgres:16-alpine3.18 # Imágen no hecha por mi.
    networks:
      - django-production # Red común a todos los dockers de este archivo.
    environment:
    # variables necesarias para la inicialización de la imágen de postgres:
      POSTGRES_PASSWORD: pass
      POSTGRES_USER: postgres
      POSTGRES_DB: pdb
    ports:
      - 5432 # puerto en el que se sirve el servicio de postgres.
    volumes:
      - ./docker-data/postgres/:/docker-data/ # Volume bind de archivos necesarios para inicializar contenedor.
      - ./db-postgres:/var/lib/postgresql/data # Volume bind donde se guarada la base de datos de postgres.
    command: /docker-data/postgres-init-production.sh # se ejecuta el script de inicialización del docker.
  django:
    container_name: django-production
    image: ifm7/django-gunicorn-production:latest
    networks:
      - django-production
    ports:
      - 8000 # puerto servicio de gunicorn y django.
    volumes:
      - ../django-data:/django-data # Volume bind de los datos de la aplicación django.
      - ./docker-data/django/:/docker-data/ # Volume bind para los archivos necesarios para la inicialización del docker.
    command: /docker-data/django-init-production.sh # Se ejecuta el escript de inciialización del docker.
    restart: always
    depends_on:
      - postgres

  nginx-alpine:
    container_name: nginx-alpine-production
    image: ifm7/nginx-alpine
    networks:
      - django-production
    ports:
      - 80:80 # Bind de puertos para servir la aplicación de Django por el puerto del host de producción.
    volumes:
      - ./docker-data/nginx/:/etc/nginx/ # Volume bind de los archivos de configuración del servicio de nginx .
    depends_on:
      - django
    command: nginx -g "daemon off;" # se inicia el servicio de nginx dentro del docker.

volumes:
  django-data:
  postgresql-conf:
  nginx-conf:
  db-postgres:

networks:
  django-production:
    driver: bridge